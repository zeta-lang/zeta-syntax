{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Zeta",
	"patterns": [
		{ "include": "#all" }
	],
	"repository": {
		"all": {
			"patterns": [
				{ "include": "#line_comments" },
				{ "include": "#controlflow" },
				{ "include": "#constants" },
				{ "include": "#numbers" },
				{ "include": "#strings" },
				{ "include": "#chars" },
				{ "include": "#sections" },
				{ "include": "#storages"},
				{ "include": "#punctuations" },
				{ "include": "#operators" },
				{ "include": "#source" }
			]
		},
		"line_comments": {
			"patterns": [ {
				"name": "comment.line.zeta",
				"match": "#.*\n"
			} ]
		},
		"source": {
			"patterns": [ {
				"name": "source.zeta",
				"match": "\\b([\\w_][\\w\\d_]*)\\b"
			} ]
		},
		"controlflow": {
			"patterns": [ {
				"name": "keyword.control.zeta",
				"match": "\\b(if|then|else|loop|until|break|continue|return)\\b"
			} ]
		},
		"sections": {
			"patterns": [
				{
					"name": "keyword.control.directive.zeta",
					"match": "\\b(import|export|using|module|namespace)\\b"
				},
				{
					"name": "storage.type.zeta",
					"match": "\\b(record|typealias|usertype)\\b"
				}
			]
		},
		"punctuations": {
			"patterns": [
				{
					"name": "punctuation.section.zeta",
					"begin": "\\{",
					"end": "\\}",
					"patterns": [ { "include": "#all" } ]
				},
				{
					"name": "keyword.operator.zeta",
					"begin": "\\[",
					"end": "\\]",
					"patterns": [ { "include": "#all" } ]
				},
				{
					"name": "keyword.operator.zeta",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [ { "include": "#all" } ]
				},
				{
					"name": "keyword.operator.zeta",
					"match": ";"
				}
			]
		},
		"storages": {
			"patterns": [
				{
					"name": "storage.modifier.zeta",
					"match": "@|\\^"
				}
			]
		},
		"constants": {
			"patterns": [ {
				"name": "constant.language.zeta",
				"match": "\\b(true|false|nil|inf|nan)\\b"
			} ]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.zeta",
					"match": "\\b([0-9][0-9_]*)([eE][\\-+]?[0-9][0-9_]*)?\\b"
				},
				{
					"name": "constant.numeric.hexadecimal.zeta",
					"match": "\\b0x[a-fA-F0-9][a-fA-F0-9_]+\\b"
				},
				{
					"name": "constant.numeric.binary.zeta",
					"match": "\\b0b[0-1][0-1_]+\\b"
				}
			]
		},

		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.zeta",
					"match": "=|\\->|\\||&|!|\\?|~|,|\\+|\\-|\\*|/|\\\\|%|\\$|:|<|>|\\."
				},
				{
					"name": "keyword.operator.zeta",
					"match": "(^|\\b)(typeof|is|as|not|and|or)($|\\b)"
				}
			]
		},

		"strings": {
			"name": "string.quoted.double.zeta",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.zeta",
					"match": "(\\\\[\\\\0'\"abefnrtv])|(\\\\u\\{[a-fA-F0-9]{1,6}\\})|(\\\\x[a-fA-F0-9]{2})"
				},

				{
					"name": "invalid.illegal.escape.zeta",
					"match": "\\\\[^\\\\0'\"abefnrtv]"
				}
			]
		},


		"chars": {
			"name": "string.quoted.single.zeta",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.zeta",
					"match": "(\\\\[\\\\0'\"abefnrtv])|(\\\\u\\{[a-fA-F0-9]{1,6}\\})|(\\\\x[a-fA-F0-9]{2})"
				},

				{
					"name": "invalid.illegal.escape.zeta",
					"match": "\\\\[^\\\\0'\"abefnrtv]"
				}
			]
		}
	},
	"scopeName": "source.zeta"
}
